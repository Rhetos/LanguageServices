<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rhetos.Extensibility.Interfaces</name>
    </assembly>
    <members>
        <member name="T:Rhetos.Extensibility.INamedPlugins`1">
            <summary>
            This is a simple wrapper around internal DI container for resolving "named" plugins, allowing plugin projects to compile without referencing Autofac.
            </summary>
            <remarks>
            Named plugins cannot be used to list all plugins (Autofac limitation). If that feature is needed, the plugin must
            be registered both as a named (keyed) service, and as a simple service, then use IPluginsContainer to get all plugins.
            https://stackoverflow.com/questions/4959148/is-it-possible-in-autofac-to-resolve-all-services-for-a-type-even-if-they-were
            </remarks>
        </member>
        <member name="M:Rhetos.Extensibility.IPluginsContainer`1.GetPlugins">
            <summary>
            The plugins are sorted by their dependencies.
            </summary>
        </member>
        <member name="M:Rhetos.Extensibility.IPluginsContainer`1.GetImplementations(System.Type)">
            <summary>
            The implementations are sorted by their dependencies.
            </summary>
        </member>
        <member name="T:Rhetos.Extensibility.IServerInitializer">
            <summary>
            Interface for plugins that initialize data in the application's database.
            The plugins are called on database update after the database structure is modified,
            all code generators are executed and the generated object model is registered to IoC container.
            </summary>
        </member>
    </members>
</doc>
