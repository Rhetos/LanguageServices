<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rhetos.Utilities.Interfaces</name>
    </assembly>
    <members>
        <member name="M:Rhetos.Utilities.CsUtility.QuotedString(System.String)">
            <summary>
            Generates a C# string constant.
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.CsUtility.TextToIdentifier(System.String)">
            <summary>
            Changes special characters in text to alphanumeric characters and '_'.
            Different texts will always produce different results.
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.CsUtility.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{System.String})">
            <summary>
            Reads a value from the dictionary, with extended error handling.
            Parameter exceptionMessage can contain format tag {0} that will be replaced by missing key.
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.CsUtility.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.String)">
            <summary>
            Reads a value from the dictionary, with extended error handling.
            Parameter exceptionMessage can contain format tag {0} that will be replaced by missing key.
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.CsUtility.GetValueOrEmpty``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0)">
            <summary>
            Reads a value from the dictionary or returns an empty List if the dictionary does not contain the key.
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.CsUtility.GetIdentifierError(System.String)">
            <summary>
            Returns null if the argument is a valid identifier, error message otherwise.
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.CsUtility.GetClassHierarchy(System.Type)">
            <summary>
            Result does not include implemented interfaces, only base classes.
            Result includes the given type.
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.CsUtility.Materialize``1(System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            If <paramref name="items"/> is not a List or an Array, converts it to a List&lt;<typeparamref name="T"/>&gt;.
            If the parameter is null, it will remain null.
            Use this function to make sure that the <paramref name="items"/> is not a LINQ query
            before using it multiple times, in order to avoid the query evaluation every time
            (sometimes it means reading data from the database on every evaluation).
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.CsUtility.GetNaturalSortString(System.String)">
            <summary>
            Use this method to sort strings respecting the number values in the string.
            Example: new[] { "a10", "a11", "a9", "b3-11", "b3-2" }.OrderBy(s => GetNaturalSortString(s))
            Returns: "a9", "a10", "a11", "b3-2", "b3-11"
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.CsUtility.ReportTypeLoadException(System.Exception,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a detailed report message for the ReflectionTypeLoadException.
            Returns null if the exception cannot be interpreted as a type load exception.
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.CsUtility.MatchPrefixes(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Returns a subset of the given strings that match the given prefixes.
            String comparison is ordinal, case insensitive.
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.CsUtility.GroupItemsKeepOrdering``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Groups items to batches by their group value, keeping the order of the items.
            This may result with two items with the same key ending in different groups, if there is an item with different key between them.
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.CsUtility.Limit(System.String,System.Int32,System.String)">
            <param name="trimMark">The suffix that will be appended if the text is trimmed (for example: "...").
            The resulting text length with the suffix included will be maxLength.</param>
        </member>
        <member name="M:Rhetos.Utilities.CsUtility.LimitWithHash(System.String,System.Int32)">
            <summary>
            Shortens the text if needed to match the limit.
            If shortened, the text will end with hash value that represent the erased suffix.
            This reduces name collisions if two string have same prefix longer then <paramref name="maxLength"/>.
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.CsUtility.GetShortTypeName(System.Type)">
            <summary>
            Simplified type name for logging and reporting, without namespace and assembly information.
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.CsUtility.GenerateGuid(System.String)">
            <summary>
            Generates GUID based on a string.
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.CsUtility.GetUnderlyingGenericType(System.Type,System.Type)">
            <summary>
            Returns the underlying generic type with concrete type arguments.
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.CsUtility.GetStableHashCode(System.String)">
            <summary>
            Standard GetHashCode() function in not guaranteed to return same result in different environments.
            </summary>
        </member>
        <member name="T:Rhetos.Utilities.ExcessDotInKey">
            <summary>
            Before Rhetos v4.0, dot character was expected before string key parameter of current statement.
            Since Rhetos v4.0, dot should only be used for separating key parameters of referenced concept,
            but legacy syntax is allowed by setting this option to <see cref="F:Rhetos.Utilities.ExcessDotInKey.Ignore"/> or <see cref="F:Rhetos.Utilities.ExcessDotInKey.Warning"/>.
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.FilesUtility.EmptyDirectory(System.String)">
            <summary>
            Creates the directory if it doesn't exists and deletes its content.
            This method will not delete the directory and create a new one; the existing directory is kept, in order to reduce locking issues if the folder is opened in command prompt or other application.
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.FilesUtility.SafeCopyFile(System.String,System.String)">
            <summary>
            Creates the target directory if required. Retries if copying fails.
            If the destination file exists, copying will fail. See <see cref="M:Rhetos.Utilities.FilesUtility.SafeCopyFile(System.String,System.String,System.Boolean)"/> for the overwrite option.
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.FilesUtility.SafeCopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Creates the target directory if required. Retries if copying fails.
            </summary>
        </member>
        <member name="T:Rhetos.Utilities.MultiDictionary`2">
            <summary>
            May contain multiple values with the same key.
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.MultiDictionary`2.Get(`0)">
            <summary>
            Returns an empty array if the given key does not exist.
            </summary>
        </member>
        <member name="M:Rhetos.Utilities.SystemUtility.GetRhetosVersion">
            <summary>
            Rhetos framework version.
            Note that it is not compatible with System.Version because Rhetos version may contain
            textual pre-release information and build metadata (see Semantic Versioning 2.0.0 for example).
            </summary>
        </member>
        <member name="T:Rhetos.Utilities.ValueOrError`1">
            <summary>
            Used as a replacement for exceptions in error handling. Exceptions can hinder performance
            in debug mode (about 100 exceptions per second can be processed).
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
        </member>
        <member name="M:Rhetos.Utilities.ValueOrError`1.CreateValue(`0)">
            <summary>
            Implicit cast can be used instead of this function.
            </summary>
        </member>
        <member name="T:Rhetos.Utilities.ValueOrError">
            <summary>
            This is a helper for returning an error without specifying a generic type.
            It will be implicitly converted to the generic <see cref="T:Rhetos.Utilities.ValueOrError`1"/> class.
            </summary>
        </member>
        <member name="T:Rhetos.ClientException">
            <summary>
            Exception denotes a request or data format error occurred in communication between client and server. 
            Client is not adhering to server API.
            Web response HTTP status code on this exception is 400 by default, but can be configured by <see cref="P:Rhetos.ClientException.HttpStatusCode"/>.
            </summary>
        </member>
        <member name="T:Rhetos.FrameworkException">
            <summary>
            An internal error of the Rhetos application occurred. Usually a result of incorrect configuration/setup or a platform bug.
            Web response HTTP status code on this exception is 500.
            </summary>
        </member>
        <member name="T:Rhetos.RhetosException">
            <summary>
            Base class for Rhetos framework and application exceptions.
            </summary>
        </member>
        <member name="P:Rhetos.RhetosException.Info">
            <summary>
            Additional error context. It will be sent to the client if the exception is UserException or ClientException.
            The Info property is used instead of the existing "Data" dictionary to avoid security issue when sending data to the client,
            since other tools might use the Data for internal debugging data.
            </summary>
        </member>
        <member name="T:Rhetos.UserException">
            <summary>
            This exceptions denotes an error during validation of data vs business logic rules.
            These errors result from end user's incorrect usage of the application.
            Web response HTTP status code on this exception is 400.
            </summary>
        </member>
        <member name="F:Rhetos.UserException.MessageParameters">
            <summary>
            The MessageParameters are used with the Message property, matching the arguments of the string.Format(Message, MessageParameters) method.
            </summary>
        </member>
        <member name="M:Rhetos.UserException.#ctor(System.String,System.Object[])">
            <summary>
            User error message localization with parameters.
            </summary>
            <param name="message">
            Error message for the end user.
            Use parameters similar to <see cref="M:System.String.Format(System.String,System.Object[])"/> to simplify localization, for example "Value of {0} should be less then {1}.".
            Single message translation can be used in multiple scenarios with different parameter values.
            </param>
            <param name="messageParameters">
            Parameters for string <paramref name="message"/>, similar to <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </param>
        </member>
        <member name="M:Rhetos.UserException.#ctor(System.String,System.Object[],System.String,System.Exception)">
            <summary>
            User error message localization with parameters, error metadata and inner exception.
            </summary>
            <param name="message">
            Error message for the end user.
            Use parameters similar to <see cref="M:System.String.Format(System.String,System.Object[])"/> to simplify localization, for example "Value of {0} should be less then {1}.".
            Single message translation can be used in multiple scenarios with different parameter values.
            </param>
            <param name="messageParameters">
            Parameters for string <paramref name="message"/>, similar to <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </param>
        </member>
        <member name="M:Rhetos.UserException.MessageForLog">
            <summary>
            Evaluates the message parameters with string.Format, without localization.
            Use this method in error logging to make sure every error is logged even if it's message format is not valid.
            </summary>
        </member>
        <member name="T:Rhetos.Dsl.FilePosition">
            <summary>
            Position in file for reporting location of an error.
            File path is required, but the file does not need to exit on disk.
            Position is optional. It can represent one location (begin only) or a range (begin and end).
            </summary>
        </member>
    </members>
</doc>
